// Check Self Capture
	public boolean checkSelfCapture(Location loc, Stone s, Position fromPos) {
		boolean output = false;
		HashMap<Position, Stone> surroundings = this.getSurroundings(loc);
		Stone original = Stone.valueOf(this.getTurn().toUpperCase());

		for (Position pos : surroundings.keySet()) {
			System.err.println(pos.toString() + ": " + surroundings.get(pos));
		}
		System.err.println(s);

		boolean up = false;
		boolean down = false;
		boolean left = false;
		boolean right = false;
		for (Position pos : surroundings.keySet()) {
			if (pos == fromPos) {
				String positionString = fromPos.toString().toLowerCase();
				if (positionString.equals("up")) {
					up = true;
				} else if (positionString.equals("down")) {
					down = true;
				} else if (positionString.equals("left")) {
					left = true;
				} else if (positionString.equals("right")) {
					right = true;
				}
				System.out.println("Recursive!");
			} else {
				if (pos == Position.UP) {
					System.out.println("UP!");
					Location newLocation = loc.add(0, 1);
					Stone detect = this.getPieceFromPosition(newLocation.getX(), newLocation.getY());
					// System.out.println(newLocation);

					if (detect == Stone.BOARDER) {
						System.out.println("Boarder!");
						up = true;
					} else if (detect == Stone.EMPTY) {
						System.out.println("Air!");
						up = false;
					} else {
						System.out.println("Hit Wall!");
						if (detect == original) {
							System.out.println("Same Color!");
							this.checkSelfCapture(newLocation, detect, Position.UP);
						} else {
							System.out.println("WALLLLL!");
							System.out.println("Detect: " + detect.toString() + " Original: " + original);
							up = true;
						}
					}
					loc.add(0, -1);
				} else if (pos == Position.DOWN) {
					System.out.println("DOWN!");
					Location newLocation = loc.add(0, -1);
					Stone detect = this.getPieceFromPosition(newLocation.getX(), newLocation.getY());

					if (detect == Stone.BOARDER) {
						System.out.println("Boarder!");
						down = true;
					} else if (detect == Stone.EMPTY) {
						System.out.println("Air!");
						down = false;
					} else {
						if (detect == original) {
							System.out.println("Same Color!");
							this.checkSelfCapture(newLocation, detect, Position.DOWN);
						} else {
							System.out.println("WALLLLL!");
							System.out.println("Detect: " + detect.toString() + " Original: " + original);
							down = true;
						}
					}
					loc.add(0, 1);
				} else if (pos == Position.LEFT) {
					System.out.println("LEFT!");
					Location newLocation = loc.add(-1, 0);
					Stone detect = this.getPieceFromPosition(newLocation.getX(), newLocation.getY());

					if (detect == Stone.BOARDER) {
						System.out.println("Boarder!");
						down = true;
					} else if (detect == Stone.EMPTY) {
						System.out.println("Air!");
						left = false;
					} else {
						if (detect == original) {
							System.out.println("Same Color!");
							this.checkSelfCapture(newLocation, detect, Position.LEFT);
						} else {
							System.out.println("WALLLLL!");
							System.out.println("Detect: " + detect.toString() + " Original: " + original);
							left = true;
						}
					}
					loc.add(1, 0);
				} else if (pos == Position.RIGHT) {
					System.out.println("RIGHT!");
					Location newLocation = loc.add(1, 0);
					Stone detect = this.getPieceFromPosition(newLocation.getX(), newLocation.getY());

					if (detect == Stone.BOARDER) {
						System.out.println("Boarder!");
						down = true;
					} else if (detect == Stone.EMPTY) {
						System.out.println("Air!");
						right = false;
					} else {
						if (detect == original) {
							System.out.println("Same Color!");
							this.checkSelfCapture(newLocation, detect, Position.RIGHT);
						} else {
							System.out.println("WALLLLL!");
							System.out.println("Detect: " + detect.toString() + " Original: " + original);
							right = true;
						}
					}
					loc.add(-1, 0);
				}
			}
		}

		if (up && down && left && right) {
			output = true;
		}
		System.out.println(output);
		for (int xx = 0; xx < board.length; xx++) {
			for (int yy = 0; yy < board[0].length; yy++) {
				System.out.print(board[xx][yy] + " ");
			}
			System.out.println();
		}
		return output;
	}